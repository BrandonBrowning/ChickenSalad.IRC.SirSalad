<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lokad.Logging</name>
    </assembly>
    <members>
        <member name="T:GlobalAssemblyInfo">
            <summary>
             Assembly information class that is shared between all projects
            </summary>
        </member>
        <member name="T:Lokad.Diagnostics.DebugLog">
            <summary>
            Simple <see cref="T:Lokad.ILog"/> that writes to the <see cref="P:System.Diagnostics.Trace.Listeners"/>, if the
            <em>DEBUG</em> symbol is defined
            </summary>
            <remarks>Use Logging stack, if more flexibility is needed</remarks>
        </member>
        <member name="T:Lokad.ILog">
            <summary>
            Shared interface to abstract away from the specific
            logging library
            </summary>
        </member>
        <member name="M:Lokad.ILog.Log(Lokad.LogLevel,System.Object)">
            <summary> Writes the message to the logger </summary>
            <param name="level">The importance level</param>
            <param name="message">The actual message</param>
        </member>
        <member name="M:Lokad.ILog.Log(Lokad.LogLevel,System.Exception,System.Object)">
            <summary>
            Writes the exception and associated information 
            to the logger
            </summary>
            <param name="level">The importance level</param>
            <param name="ex">The actual exception</param>
            <param name="message">Information related to the exception</param>
        </member>
        <member name="M:Lokad.ILog.IsEnabled(Lokad.LogLevel)">
            <summary>
            Determines whether the messages of specified level are being logged down
            </summary>
            <param name="level">The level.</param>
            <returns>
            	<c>true</c> if the specified level is logged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Lokad.Diagnostics.DebugLog.Instance">
            <summary>  Singleton instance </summary>
        </member>
        <member name="F:Lokad.Diagnostics.DebugLog.Provider">
            <summary>
            Named provider for the <see cref="T:Lokad.Diagnostics.DebugLog"/>
            </summary>
        </member>
        <member name="M:Lokad.Diagnostics.DebugLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lokad.Diagnostics.DebugLog"/> class.
            </summary>
            <param name="logName">Name of the log.</param>
        </member>
        <member name="T:Lokad.LambdaLogProvider">
            <summary>
            Log provider, that uses lambda expression
            </summary>
        </member>
        <member name="T:Lokad.ILogProvider">
            <summary>
            Creates logs using the name
            </summary>
        </member>
        <member name="M:Lokad.LambdaLogProvider.#ctor(System.Func{System.String,Lokad.ILog})">
            <summary>
            Initializes a new instance of the <see cref="T:Lokad.LambdaLogProvider"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="T:Lokad.Diagnostics.NullLog">
            <summary>
            <see cref="T:Lokad.ILog"/> that does not do anything
            </summary>
        </member>
        <member name="F:Lokad.Diagnostics.NullLog.Instance">
            <summary>
            Singleton instance of the <see cref="T:Lokad.ILog"/>
            </summary>
        </member>
        <member name="F:Lokad.Diagnostics.NullLog.Provider">
            <summary>
            Named provider for the <see cref="T:Lokad.Diagnostics.NullLog"/>
            </summary>
        </member>
        <member name="T:Lokad.Diagnostics.TraceLog">
            <summary>
            Simple <see cref="T:Lokad.ILog"/> that writes to the <see cref="P:System.Diagnostics.Trace.Listeners"/>
            </summary>
            <remarks>Use Logging stack, if more flexibility is needed</remarks>
        </member>
        <member name="F:Lokad.Diagnostics.TraceLog.Instance">
            <summary>  Singleton instance </summary>
        </member>
        <member name="F:Lokad.Diagnostics.TraceLog.Provider">
            <summary>
            Named provider for the <see cref="T:Lokad.Diagnostics.TraceLog"/>
            </summary>
        </member>
        <member name="M:Lokad.Diagnostics.TraceLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Lokad.Diagnostics.TraceLog"/> class.
            </summary>
            <param name="logName">Name of the log.</param>
        </member>
        <member name="T:Lokad.ILogExtensions">
            <summary>
            Helper extensions for any class that implements <see cref="T:Lokad.ILog"/>
            </summary>
        </member>
        <member name="M:Lokad.ILogExtensions.IsDebugEnabled(Lokad.ILog)">
            <summary>
            Determines whether the specified log is recording debug messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording debug messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lokad.ILogExtensions.Debug(Lokad.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Debug"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.DebugFormat(Lokad.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Debug"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.Debug(Lokad.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Debug"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.DebugFormat(Lokad.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Debug"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.IsInfoEnabled(Lokad.ILog)">
            <summary>
            Determines whether the specified log is recording info messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording info messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lokad.ILogExtensions.Info(Lokad.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Info"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.InfoFormat(Lokad.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Info"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.Info(Lokad.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Info"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.InfoFormat(Lokad.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Info"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.IsWarnEnabled(Lokad.ILog)">
            <summary>
            Determines whether the specified log is recording warning messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording warning messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lokad.ILogExtensions.Warn(Lokad.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Warn"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.WarnFormat(Lokad.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Warn"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.Warn(Lokad.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Warn"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.WarnFormat(Lokad.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Warn"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.IsErrorEnabled(Lokad.ILog)">
            <summary>
            Determines whether the specified log is recording error messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording error messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lokad.ILogExtensions.Error(Lokad.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Error"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.ErrorFormat(Lokad.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Error"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.Error(Lokad.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Error"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.ErrorFormat(Lokad.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Error"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.IsFatalEnabled(Lokad.ILog)">
            <summary>
            Determines whether the specified log is recording Fatal messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording datal messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Lokad.ILogExtensions.Fatal(Lokad.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Fatal"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.FatalFormat(Lokad.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Fatal"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Lokad.ILogExtensions.Fatal(Lokad.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Fatal"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Lokad.ILogExtensions.FatalFormat(Lokad.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:Lokad.LogLevel.Fatal"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:Lokad.ILogProviderExtensions">
            <summary>
            Extension methods for the <see cref="T:Lokad.INamedProvider`1"/>
            of <see cref="T:Lokad.ILog"/>
            </summary>
        </member>
        <member name="M:Lokad.ILogProviderExtensions.CreateLog``1(Lokad.INamedProvider{Lokad.ILog})">
            <summary>
            Creates new log using the type as name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Lokad.LogLevel">
            <summary>
            Degines the importance level associated with the log
            entry in <see cref="T:Lokad.ILog"/>
            </summary>
        </member>
        <member name="F:Lokad.LogLevel.Debug">
            <summary> Message is intended for debugging </summary>
        </member>
        <member name="F:Lokad.LogLevel.Info">
            <summary> Informatory message </summary>
        </member>
        <member name="F:Lokad.LogLevel.Warn">
            <summary> The message is about potential problem in the system </summary>
        </member>
        <member name="F:Lokad.LogLevel.Error">
            <summary> Some error has occured </summary>
        </member>
        <member name="F:Lokad.LogLevel.Fatal">
            <summary> Message is associated with the critical problem </summary>
        </member>
        <member name="F:Lokad.LogLevel.Max">
            <summary>
            Highest possible level
            </summary>
        </member>
        <member name="F:Lokad.LogLevel.Min">
            <summary> Smallest logging level</summary>
        </member>
        <member name="T:Lokad.Rules.LogScope">
            <summary> <see cref="T:Lokad.Rules.IScope"/> that maintains scope path and writes inner messages 
            to the log  with the proper path
            </summary>
        </member>
        <member name="M:Lokad.Rules.LogScope.#ctor(System.String,Lokad.ILogProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Lokad.Rules.LogScope"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logProvider">The log provider.</param>
        </member>
    </members>
</doc>
